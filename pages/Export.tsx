
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Download, FileCode2, Terminal } from 'lucide-react';
import jsyaml from 'js-yaml';
import { useScanStore } from '../store/scanStore';
import { Link } from 'react-router-dom';

const ExportCard = ({ title, description, icon, onExport, disabled }: { title: string, description: string, icon: React.ReactNode, onExport: () => void, disabled?: boolean }) => (
    <div className={`bg-light-card dark:bg-dark-card p-6 rounded-xl border border-light-border dark:border-dark-border ${disabled ? 'opacity-50' : ''}`}>
        <div className="flex items-center gap-4 mb-4">
            <div className="flex items-center justify-center h-12 w-12 rounded-lg bg-cosmic-blue/10 text-cosmic-blue">
                {icon}
            </div>
            <h3 className="text-lg font-semibold">{title}</h3>
        </div>
        <p className="text-slate-500 dark:text-slate-400 text-sm mb-6">{description}</p>
        <button
            onClick={onExport}
            disabled={disabled}
            className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-cosmic-blue text-white rounded-md font-semibold hover:opacity-90 transition-opacity disabled:cursor-not-allowed"
        >
            <Download size={16} />
            Generate & Download
        </button>
    </div>
);

const Export = () => {
    const { result } = useScanStore();
    const [generatedContent, setGeneratedContent] = useState<{ title: string; content: string; lang: string } | null>(null);

    const downloadFile = (filename: string, content: string) => {
        const element = document.createElement('a');
        const file = new Blob([content], { type: 'text/plain' });
        element.href = URL.createObjectURL(file);
        element.download = filename;
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    };

    const generateEslintConfig = () => {
        const limitedFeatures = result?.issues.filter(i => i.status === 'limited availability').map(i => i.featureId) || [];
        const eslintConfig = {
            plugins: ["@baseline-scout/eslint-plugin"], // Fictional plugin name
            rules: limitedFeatures.reduce((acc, feature) => {
                acc[`@baseline-scout/no-limited-features/${feature}`] = "warn";
                return acc;
            }, {} as Record<string, string>)
        };
        const content = `// Generated by Baseline Feature Scout\n\nmodule.exports = ${JSON.stringify(eslintConfig, null, 2)};`;
        setGeneratedContent({ title: '.eslintrc.js', content, lang: 'javascript' });
        downloadFile('.eslintrc.js', content);
    };

    const generateGithubAction = () => {
        const action = {
            name: 'Baseline Score Check',
            on: 'pull_request',
            jobs: {
                'baseline-check': {
                    'runs-on': 'ubuntu-latest',
                    steps: [
                        { uses: 'actions/checkout@v3' },
                        {
                            name: 'Run Baseline Feature Scout',
                            uses: 'your-repo/baseline-scout-action@v1', // Fictional action
                            with: {
                                'fail-threshold': 80 // Fails if score is below 80
                            }
                        }
                    ]
                }
            }
        };
        const content = `# Generated by Baseline Feature Scout\n\n${jsyaml.dump(action)}`;
        setGeneratedContent({ title: 'baseline-check.yml', content, lang: 'yaml' });
        downloadFile('baseline-check.yml', content);
    };

    return (
        <div>
            <div className="text-center max-w-2xl mx-auto">
                <h1 className="text-3xl font-bold mb-2">Export & Integrations</h1>
                <p className="text-slate-500 dark:text-slate-400 mb-8">
                    Generate configuration files for your favorite tools based on your project scan to enforce modern web standards.
                </p>
                {!result && (
                    <div className="p-4 bg-cosmic-orange/10 border border-cosmic-orange/30 text-cosmic-orange rounded-md">
                        Please <Link to="/scan" className="font-bold underline">scan a project</Link> first to enable exports.
                    </div>
                )}
            </div>

            <div className="grid md:grid-cols-2 gap-8 mt-12 max-w-4xl mx-auto">
                <ExportCard
                    title="ESLint Config"
                    description="Generate an ESLint configuration file that warns against using features with limited availability found in your project."
                    icon={<FileCode2 size={24} />}
                    onExport={generateEslintConfig}
                    disabled={!result}
                />
                <ExportCard
                    title="GitHub Action"
                    description="Create a CI/CD workflow file to run a Baseline score check on every pull request, preventing regressions."
                    icon={<Terminal size={24} />}
                    onExport={generateGithubAction}
                    disabled={!result}
                />
            </div>

            {generatedContent && (
                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="mt-12 max-w-4xl mx-auto">
                    <h3 className="font-semibold mb-2">Generated {generatedContent.title}:</h3>
                    <pre className="bg-dark-card p-4 rounded-md text-sm text-white overflow-x-auto">
                        <code>{generatedContent.content}</code>
                    </pre>
                </motion.div>
            )}
        </div>
    );
};

export default Export;
